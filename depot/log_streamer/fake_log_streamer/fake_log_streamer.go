// This file was generated by counterfeiter
package fake_log_streamer

import (
	"io"
	"sync"

	"code.cloudfoundry.org/executor/depot/log_streamer"
)

type FakeLogStreamer struct {
	StdoutStub        func() io.Writer
	stdoutMutex       sync.RWMutex
	stdoutArgsForCall []struct{}
	stdoutReturns     struct {
		result1 io.Writer
	}
	StderrStub        func() io.Writer
	stderrMutex       sync.RWMutex
	stderrArgsForCall []struct{}
	stderrReturns     struct {
		result1 io.Writer
	}
	FlushStub             func()
	flushMutex            sync.RWMutex
	flushArgsForCall      []struct{}
	WithSourceStub        func(sourceName string) log_streamer.LogStreamer
	withSourceMutex       sync.RWMutex
	withSourceArgsForCall []struct {
		sourceName string
	}
	withSourceReturns struct {
		result1 log_streamer.LogStreamer
	}
}

func (fake *FakeLogStreamer) Stdout() io.Writer {
	fake.stdoutMutex.Lock()
	fake.stdoutArgsForCall = append(fake.stdoutArgsForCall, struct{}{})
	fake.stdoutMutex.Unlock()
	if fake.StdoutStub != nil {
		return fake.StdoutStub()
	} else {
		return fake.stdoutReturns.result1
	}
}

func (fake *FakeLogStreamer) StdoutCallCount() int {
	fake.stdoutMutex.RLock()
	defer fake.stdoutMutex.RUnlock()
	return len(fake.stdoutArgsForCall)
}

func (fake *FakeLogStreamer) StdoutReturns(result1 io.Writer) {
	fake.StdoutStub = nil
	fake.stdoutReturns = struct {
		result1 io.Writer
	}{result1}
}

func (fake *FakeLogStreamer) Stderr() io.Writer {
	fake.stderrMutex.Lock()
	fake.stderrArgsForCall = append(fake.stderrArgsForCall, struct{}{})
	fake.stderrMutex.Unlock()
	if fake.StderrStub != nil {
		return fake.StderrStub()
	} else {
		return fake.stderrReturns.result1
	}
}

func (fake *FakeLogStreamer) StderrCallCount() int {
	fake.stderrMutex.RLock()
	defer fake.stderrMutex.RUnlock()
	return len(fake.stderrArgsForCall)
}

func (fake *FakeLogStreamer) StderrReturns(result1 io.Writer) {
	fake.StderrStub = nil
	fake.stderrReturns = struct {
		result1 io.Writer
	}{result1}
}

func (fake *FakeLogStreamer) Flush() {
	fake.flushMutex.Lock()
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct{}{})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		fake.FlushStub()
	}
}

func (fake *FakeLogStreamer) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *FakeLogStreamer) WithSource(sourceName string) log_streamer.LogStreamer {
	fake.withSourceMutex.Lock()
	fake.withSourceArgsForCall = append(fake.withSourceArgsForCall, struct {
		sourceName string
	}{sourceName})
	fake.withSourceMutex.Unlock()
	if fake.WithSourceStub != nil {
		return fake.WithSourceStub(sourceName)
	} else {
		return fake.withSourceReturns.result1
	}
}

func (fake *FakeLogStreamer) WithSourceCallCount() int {
	fake.withSourceMutex.RLock()
	defer fake.withSourceMutex.RUnlock()
	return len(fake.withSourceArgsForCall)
}

func (fake *FakeLogStreamer) WithSourceArgsForCall(i int) string {
	fake.withSourceMutex.RLock()
	defer fake.withSourceMutex.RUnlock()
	return fake.withSourceArgsForCall[i].sourceName
}

func (fake *FakeLogStreamer) WithSourceReturns(result1 log_streamer.LogStreamer) {
	fake.WithSourceStub = nil
	fake.withSourceReturns = struct {
		result1 log_streamer.LogStreamer
	}{result1}
}

var _ log_streamer.LogStreamer = new(FakeLogStreamer)
