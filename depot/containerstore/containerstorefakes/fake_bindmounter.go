// This file was generated by counterfeiter
package containerstorefakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot/containerstore"
	"github.com/cloudfoundry-incubator/executor/depot/log_streamer"
	"github.com/pivotal-golang/lager"
)

type FakeDependencyManager struct {
	DownloadCachedDependenciesStub        func(logger lager.Logger, mounts []executor.CachedDependency, logStreamer log_streamer.LogStreamer) (containerstore.BindMounts, error)
	downloadCachedDependenciesMutex       sync.RWMutex
	downloadCachedDependenciesArgsForCall []struct {
		logger      lager.Logger
		mounts      []executor.CachedDependency
		logStreamer log_streamer.LogStreamer
	}
	downloadCachedDependenciesReturns struct {
		result1 containerstore.BindMounts
		result2 error
	}
	ReleaseCachedDependenciesStub        func(logger lager.Logger, keys []containerstore.BindMountCacheKey) error
	releaseCachedDependenciesMutex       sync.RWMutex
	releaseCachedDependenciesArgsForCall []struct {
		logger lager.Logger
		keys   []containerstore.BindMountCacheKey
	}
	releaseCachedDependenciesReturns struct {
		result1 error
	}
}

func (fake *FakeDependencyManager) DownloadCachedDependencies(logger lager.Logger, mounts []executor.CachedDependency, logStreamer log_streamer.LogStreamer) (containerstore.BindMounts, error) {
	fake.downloadCachedDependenciesMutex.Lock()
	fake.downloadCachedDependenciesArgsForCall = append(fake.downloadCachedDependenciesArgsForCall, struct {
		logger      lager.Logger
		mounts      []executor.CachedDependency
		logStreamer log_streamer.LogStreamer
	}{logger, mounts, logStreamer})
	fake.downloadCachedDependenciesMutex.Unlock()
	if fake.DownloadCachedDependenciesStub != nil {
		return fake.DownloadCachedDependenciesStub(logger, mounts, logStreamer)
	} else {
		return fake.downloadCachedDependenciesReturns.result1, fake.downloadCachedDependenciesReturns.result2
	}
}

func (fake *FakeDependencyManager) DownloadCachedDependenciesCallCount() int {
	fake.downloadCachedDependenciesMutex.RLock()
	defer fake.downloadCachedDependenciesMutex.RUnlock()
	return len(fake.downloadCachedDependenciesArgsForCall)
}

func (fake *FakeDependencyManager) DownloadCachedDependenciesArgsForCall(i int) (lager.Logger, []executor.CachedDependency, log_streamer.LogStreamer) {
	fake.downloadCachedDependenciesMutex.RLock()
	defer fake.downloadCachedDependenciesMutex.RUnlock()
	return fake.downloadCachedDependenciesArgsForCall[i].logger, fake.downloadCachedDependenciesArgsForCall[i].mounts, fake.downloadCachedDependenciesArgsForCall[i].logStreamer
}

func (fake *FakeDependencyManager) DownloadCachedDependenciesReturns(result1 containerstore.BindMounts, result2 error) {
	fake.DownloadCachedDependenciesStub = nil
	fake.downloadCachedDependenciesReturns = struct {
		result1 containerstore.BindMounts
		result2 error
	}{result1, result2}
}

func (fake *FakeDependencyManager) ReleaseCachedDependencies(logger lager.Logger, keys []containerstore.BindMountCacheKey) error {
	fake.releaseCachedDependenciesMutex.Lock()
	fake.releaseCachedDependenciesArgsForCall = append(fake.releaseCachedDependenciesArgsForCall, struct {
		logger lager.Logger
		keys   []containerstore.BindMountCacheKey
	}{logger, keys})
	fake.releaseCachedDependenciesMutex.Unlock()
	if fake.ReleaseCachedDependenciesStub != nil {
		return fake.ReleaseCachedDependenciesStub(logger, keys)
	} else {
		return fake.releaseCachedDependenciesReturns.result1
	}
}

func (fake *FakeDependencyManager) ReleaseCachedDependenciesCallCount() int {
	fake.releaseCachedDependenciesMutex.RLock()
	defer fake.releaseCachedDependenciesMutex.RUnlock()
	return len(fake.releaseCachedDependenciesArgsForCall)
}

func (fake *FakeDependencyManager) ReleaseCachedDependenciesArgsForCall(i int) (lager.Logger, []containerstore.BindMountCacheKey) {
	fake.releaseCachedDependenciesMutex.RLock()
	defer fake.releaseCachedDependenciesMutex.RUnlock()
	return fake.releaseCachedDependenciesArgsForCall[i].logger, fake.releaseCachedDependenciesArgsForCall[i].keys
}

func (fake *FakeDependencyManager) ReleaseCachedDependenciesReturns(result1 error) {
	fake.ReleaseCachedDependenciesStub = nil
	fake.releaseCachedDependenciesReturns = struct {
		result1 error
	}{result1}
}

var _ containerstore.DependencyManager = new(FakeDependencyManager)
